from minimax import minimax, alpha_beta, heuristic_path, print_path
from game_tree import GameTree

def test_1_path_result_consistency(sequence):
    if isinstance(sequence, int):
        depth = sequence
    elif isinstance(sequence, str):
        depth = len(sequence)
    game = GameTree(sequence, depth)
    seq_string = game.root.sequence
    score1, path1 = minimax(game.root, True)   
    path2 = heuristic_path(game.root, True)
    score2 = path2[-1].score_player1 - path2[-1].score_player2
    score3, path3 = alpha_beta(game.root, True, -float('inf'), float('inf'))
    
    if score1 == score2 and score2 == score3:
        print(f"\033[92m Path result consistency test, sequence:{seq_string} - Passed \033[0m")
    else:
        print(f"\033[91m Path result consistency test, sequence:{seq_string} - Failed (Minimax:{score1} != AlphaBeta:{score3} != Heuristics:{score2}) \033[0m")
        print(f"Minimax path:")
        print_path(path1)
        print(f"AlphaBeta path:")
        print_path(path3)
        print(f"Heuristics path:")
        print_path(path2)


print("- Heuristic function test -------------------------------------------------------------------------------------------------")
print(">>>>>>>> 5")
test_1_path_result_consistency("00000")
test_1_path_result_consistency("01010")
test_1_path_result_consistency("10101")
test_1_path_result_consistency("11111")
test_1_path_result_consistency(5)
test_1_path_result_consistency(5)
test_1_path_result_consistency(5)
test_1_path_result_consistency(5)
print(">>>>>>>> 6")
test_1_path_result_consistency("000000")
test_1_path_result_consistency("010101")
test_1_path_result_consistency("101010")
test_1_path_result_consistency("111111")
test_1_path_result_consistency(6)
test_1_path_result_consistency(6)
test_1_path_result_consistency(6)
test_1_path_result_consistency(6)
print(">>>>>>>> 7")
test_1_path_result_consistency("0000000")
test_1_path_result_consistency("0101010")
test_1_path_result_consistency("1010101")
test_1_path_result_consistency("1111111")
test_1_path_result_consistency(7)
test_1_path_result_consistency(7)
test_1_path_result_consistency(7)
test_1_path_result_consistency(7)
print(">>>>>>>> 8")
test_1_path_result_consistency("00000000")
test_1_path_result_consistency("01010101")
test_1_path_result_consistency("10101010")
test_1_path_result_consistency("11111111")
test_1_path_result_consistency(8)
test_1_path_result_consistency(8)
test_1_path_result_consistency(8)
test_1_path_result_consistency(8)
print(">>>>>>>> 9")
test_1_path_result_consistency("000000000")
test_1_path_result_consistency("010101010")
test_1_path_result_consistency("101010101")
test_1_path_result_consistency("111111111")
test_1_path_result_consistency(9)
test_1_path_result_consistency(9)
test_1_path_result_consistency(9)
test_1_path_result_consistency(9)
# print(">>>>>>>> 10")
# test_1_heuristics("0000000000")
# test_1_heuristics("0101010101")
# test_1_heuristics("1010101010")
# test_1_heuristics("1111111111")
# test_1_heuristics(10)
# test_1_heuristics(10)
# test_1_heuristics(10)
# test_1_heuristics(10)
# print(">>>>>>>> 11")
# test_1_heuristics("00000000000")
# test_1_heuristics("01010101010")
# test_1_heuristics("10101010101")
# test_1_heuristics("11111111111")
# test_1_heuristics(11)
# test_1_heuristics(11)
# test_1_heuristics(11)
# test_1_heuristics(11)